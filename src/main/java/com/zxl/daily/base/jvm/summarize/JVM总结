1.JVM内存模型
  -堆
  -栈
  -方法区
  -本地方法区
  -程序计数器

2.类加载机制
  -加载 - 验证 - 准备 - 解析 - 初始化 - 使用 - 卸载
  -双亲委派原则 --- 父类加载  不重复加载

3.分代回收
  -年轻代 --- Eden/s1/s2
  -老年代
  -永久代/元空间
  -晋升机制 --- 根据存活时间

4.垃圾回收机制
  -标记清除
    -适用场景
      -对象存活比较多的时候使用
      -老年代
    -缺点
      -提前GC
      -碎片空间
      -扫描两次
        -标记存活对象
        -清楚没有标记的对象

  -标记复制
    -适合场景
      -存活对象比较少 比较高效
      -扫描了整个空间（标记存活对象并复制异动）
      -适合年轻代
    -缺点
      -需要空闲空间
      -需要复制移动对象

  -引用计数 --- 没办法解决循环引用的问题
  -标记整理

5.垃圾回收器
  -CMS
    -分代
      -年轻代
        -eden
        -s1
        -s2
        -minor gc --- 通过阈值晋升
      -老年代 --- major gc 等价于 full gc
      -永久代
    -缺点
      -对cpu资源比较敏感
      -无法处理浮动垃圾
      -基于标记清除算法 大量空间碎片
  -G1
    -分区概念 弱化分代
    -标记整理算法 不会产生空间碎片 分配大对象不会提前
    -可以设置预设停顿时间
    -充分利用cpu多核条件下缩短stw
    -收集步骤
      -初始标记stw 从gc root 开始直接可达对象
      -并发标记 gc root 对对象进行可达性分析 找出存活对象 --- 可达性分析算法
      -最终标记
      -筛选回收 --- 根据用户期待的gc停顿时间指定回收计划
    -回收模式
      -young gc --- 回收所有Eden s区 --- 复制一些存活对象到old区s区
      -mixed gc
    -GC模式
  -区别
    -g1分区域 每个区域是由老年代的概念的

  -内存区域设置

6.full gc

7.实战

8.JVM调优

9.JVM性能检测工具

10.内存泄漏
