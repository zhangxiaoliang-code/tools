https://blog.csdn.net/justloveyou_/article/details/72217806
一、引子
	每个开发人员对java.lang.ClassNotFoundException这个异常肯定都不陌生，其实，这个异常背后涉及到的是java技术
体系中的类加载。java类加载机制虽然和大部分开发人员直接打交道的机会不多，但是对其机制的理解有助于排查程序出现的类加载失败
等技术问题，对理解java虚拟机的连接模型和Java语言的动态性都有很大的帮助。

二、Java虚拟机类加载器结构简述
	1、JVM三种预定义类型类加载器
		当JVM启动的时候，Java开始使用如下三种类型的类加载器：
		启动（Bootstrap）类加载器：启动类加载器是本地代码实现的类加载器，她负责JAVA_HOME/lib下面的核心类库或
	-Xbootclasspath选项指定的jar包等虚拟机识别的类库加载到内存中。由于启动类加载器涉及到虚拟机本地实现细节，开发者
	无法直接获取到启动器加载器的引用。具体可由启动类加载器加载到路径可通过
	System.getProperty("sun.bootclass.path")查看。
		扩展类（Extension）加载器：扩展类加载器是由sun的ExtClassLoader
	（sun.misc.Launcher$ExtClassLoader）实现的，它负责将JAVA_HOME/lib/ext或者由系统变量-Djava.ext.dir
	指定位置中的类库加载到内存中。开发者可以使用标准扩展类加载器，具体可由扩展类加载器加载到的路径可通过
	System.getProperty("java.ext.dirs")查看。
		系统类（System）加载器：系统类加载器是由sun的AppClassLoader（sum.misc.launcher$AppClassLoader）
	实现的，它负责将用户类路径（java -classpath或者-Djava.class.path变量所指的目录、即当前类所在路径及其引用的
	第三方列库的路径，如第四节中的问题6所述）下的类库加载到内存中。开发者可以使用系统类加载器，具体可由系统类加载器加载到
	的路径可通过System.getProperty("java.class.path")查看。
		Ps：除了以上列举的三种类加载器，还有一种比较特殊的类型就是线程上下文类加载器，这个将在《深入理解Java类加载器（二）
	：线程上下文类加载器》一文中进行单独介绍。
	
	2.类加载双亲委派机制介绍和分析
		JVM在加载类是默认采用的是双亲委派机制。通俗的讲，就是某个特定的类加载器在接到加载类的请求时，首先讲家在任务委托给
	父类加载器，依次递归（本质上就是loadClass的递归调用），因此所有的加载请求最终都应该传送到顶层的启动类加载器中。如果
	父类加载器可以完成这个类的加载请求，就成功返回，只有当父类加载器无法完成此加载请求时，子加载器才会尝试去加载。事实上，
	大多数情况下，越基础的类由越上层的加载器进行加载，因为这些基础类之所以称为“基础”，是因为它们总是作为被用户代码调用的API
	（当然，也存在基础类回调用户代码的情形，即破坏双亲委派情形）。关于虚拟机默认的双亲委派机制，我们可以从系统类加载器和扩展
	类加载器为例作简单分析。
	
		上面两张图分别是扩展类加载器层次图和系统类加载器层次图。通过这两张图我们可以看出，扩展类加载器和系统类加载器均是
	继承自java.lang.ClassLoader抽象类。我们下面就简单介绍下抽象类java.lang.ClassLoader中的几个重要的方法：
	//加载指定名称（包括包名）的二进制类型，供用户调用的接口
	public Class<?> loadClass(String name) throws ClassNotFoundException{...}
	
	//加载指定名称（包括包名）的二进制类型，同时指定是否解析（但是这里的resolve参数不一定真正能达到解析效果），供继承用
	protected synchronized Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException{...}
	
	//findClass方法一般被loadClass方法调用去加载指定名称类，供继承用
	protected Class<?> findClass(String name) thorws ClassNotFoundException{...}
	
	//定义类型，一般在findClass方法中读取到对应字节码后调用，final的，不能被继承
	//这也是从侧面说明；JVM已经实现了对应的具体功能，解析对应的字节码，产生对应的内部数据结构放置到方法区，所以无需覆写，直接调用就可以
	protected find Class<?> defineClass(String name,byte[] b,int off,int len) throws ClassFormatError{...}
	
		通过进一步分析标准扩展类加载器和系统类加载器的代码以及其公共父类（java.net.URLClassLoader
	和java.security.SecureClassLoader）的代码可以看出，都没有覆写java.lang.ClassLoader中默认的加载委派规则
	---loadClass()方法。既然这样，我们就可以从java.lang.ClassLoader中的loadClass(String name)方法的代码中
	分析出虚拟机默认采用的双亲委派机制到底是什么模样：
	
	上面图片给人的直观印象系统类加载器的父类加载器是标准的扩展类加载器，标准扩展类加载器的父类加载器是启动类加载器，
	下面我们就用代码具体测试一下：
		例：MyTest1.java
		
	3.类加载双亲委派示例
		以上已经简单介绍虚拟机默认启动的类加载器、标准类扩展加载器和系统类加载器，并以三者为例结合JDK代码对JVM默认使用
	的双亲派类加载机制做了分析。下面我就来看一个综合的例子，
		例：MyTest2.java
		对比上面的两个结果，我们明显可以验证前面说的双亲委派机制：系统类加载器在接到加载com.zxl.test.classloader0.TestBean
	类型的请求时，首先委派给父类加载器（标准扩展类加载器），标准类扩展加载器抢先完成了加载请求。
	最后，将test.jar拷贝一份到<Java_Runtime_Home>/lib下，运行测试代码，输出如下：
	
		可以看到两次输出的结果一致。那就是说，放置到<Java_Runtime_Home>/lib目录下的TestBean对应的class字节码
	并没有被加载，这其实和前面讲的双亲委派机制并不矛盾。虚拟机出于安全等因素考虑，不会加载<JAVA_HOME>/lib目录下存在的
	陌生类。换句话说，虚拟机只加载<JAVA_HOME>/lib目录下它可以识别的类。因此，开发者通过将要加载的非JDK自身的类放置到
	此目录下期待启动类加载器加载是不可能的。做个进一步验证，删除<JAVA_HOME>/lib/ext目录下和工程输出目录下的TestBean
	对应的class文件，然后再运行测试代码，则将会有classNotFoundException异常抛出。有关这个问题，大家可以在
	java.lang.ClassLoader中的loadClass（String name，boolean resolve）方法中设置相应的端点调试，会发现
	findBootstrapClass0()会抛出异常，然后在下面的findClass方法中被加载，当前运行的类加载器正式扩展类加载器
	(sun.misc.Launcher$ExtClassLoader),这一点可以通过JDT中变量视图查看验证。

三.Java程序动态扩展方式

		Java的连接模型允许用户运行时扩展引用程序，即可以通过当前虚拟机中预定义的加载器加载编译时已知的类或者接口，又允许用户
	自行定义类加载器，在运行时动态扩展用户程序。通过用户自定义的类装载器，你的程序可以加载在编译时并不知道或者尚未存在的类或者
	接口，并动态连接他们并进行有选择的解析。运行时动态扩展java应用程序有如下两个途径：
		1、反射（调用java.lang.Class.forName(...)加载类）
		这个方法其实在前面已经讨论过，在后面的问题2解答中说明了该方法调用会触发哪个类加载器开始加载任务。这里需要说明的是多参数
	版本的forName(...)方法：
	public static Class<?> forName(String name, boolean initialize, ClassLoader loader) throws ClassNotFoundException  
	这里的initialize参数是很重要的，它表示在加载同时是否完成初始化工作（说明：单参数版本的forName方法默认是完成初始化的）。
	有些场景下需要将initialize设置为true来强制加载同时完成初始化，例如典型的就是加载数据库驱动问题。因为JDBC驱动程序
	只有被注册后才能被应用程序使用，这就要求驱动程序必须被初始化，而不单单被加载。
	
		2、用户自定义类加载器
		通过前面的分析，我们可以看出，除了和本地密切相关的启动类加载器之外，包括标准扩展类加载器和系统类加载器在内的所有其他
	类加载器我们都可以当做自定义类加载器来对待，唯一区别是是否被虚拟机默认使用。前面的内容已经java.lang.ClassLoader抽象
	类中的几个重要的方法做了介绍，这里就简要叙述一下一般用户自定义类加载器的工作流程（可以和后面的问题解答一起看）：
		1.首先检查请求的类型是否已经被这个类装载器装载到命名空间中了，如果已经装载，直接返回；否则转入步骤2；
		2.委派类加载请求给父类加载器（更准确地说应该是双亲加载器，真实虚拟机中各种类加载器最终会呈现出树状结构），如果父类
	加载器能够完成，则返回父类加载器加载的Class实例；否则转入步骤3；
		3.调用本类加载器的findClass（...）方法，试图获取对应的字节码。如果获取的到，则调用defineClass(...)导入类型
	到方法区；如果获取不到的字节码或者其他原因失败，向上抛异常给loadClass(...)，loadClass(...)转而调用findClass(...)
	方法处理异常，直至完成递归调用。
	
四.常见问题分析
	1、由不同的类加载器加载指定的类还是相同的类型吗？
	
		在Java中，一个类用其完全匹配类名（fully qualified class name）作为标识，这里完全匹配类名包括包名和类名。但在JVM中，
	一个类用其全名和一个ClassLoader的实例作为唯一标识，不同类加载器加载的类将被置于不同的命名空间。我们可以用两个自定义类加载器去
	加载某自定义类型（注意不要将自定义的字节码放置到系统路径或者扩展路径中，否则会被系统类加载器或扩展类加载器抢先加载），然后用获取到
	的两个Class实例进行java.lang.Object.equals(...)判断，将会得到不想等的结果
		例：MyTest5.java
		
	我们发现，obj确实是类com.zxl.test.classloader0.MyTest5实例化出来的对象，但当这个对象与类com.zxl.test.classloader0.MyTest5
	做所属类型检查时却返回了false。