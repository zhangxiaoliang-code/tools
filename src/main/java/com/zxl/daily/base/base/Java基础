面向对象三大核心特性
1.继承：
    面向对象的基石，允许创建分层等级。
    继承就是子类继承父类的特征和行为，使得子类拥有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类的相同行为。
    java中的继承只能单继承，但是可以通过内部类继承其它类来实现多继承。

2.多态：
    多态就是同一个行为具有不同的表现形式和形态的能力。
    多态就是同一个接口，使用不同的实例而执行不同的操作。
    多态性是对象多种表现形式的体现。
    同一个事件发生在不同的对象上会产生不同的结果。

3.封装（Encapsulation）：
    封装是将抽象性函数接口的实现部分细节包装、隐藏起来的方法。
    封装可以被认为是一个保护屏障，防止该类的代码和数据被外部类定义的代码随机访问。
    要访问改类的代码和数据，必须通过严格的接口控制。
    封装最主要的功能在于我们修改自己的实现代码，而不同修改那些调用我们代码的程序片段。
    适当的封装能够让程序更容易理解和维护，也加强了程序的安全性。

面向对象三大特性详解
一、继承
    1.继承的概念：
        如同生活中的子女继承父母拥有所有的财产，在程序中继承性是子类拥有父类数据结构的方法和机制，这是类与类之间的关系。
        继承只能是单继承。

    2.继承的好处：
        子类拥有父类的所有属性和方法（除了private修饰的属性不能拥有），从而实现了代码的复用。

    3.语法规则：
        class 子类 extends 父类.
        A、方法的重写
            子类如果对继承的父类方法不满意（不适合），可以自己编写继承的方法，这种方式成为“方法重写”。当调用方法是会优先调用子类的方法。

            重写注意事项：
                返回值相同
                方法名相同
                参数个数和类型相同

            重载和重写的区别：
                方法重载：在同一个类中处理不同数据的多个相同方法名的多态手段。
                方法重写：相对继承而言，子类中对父类已经存在的方法进行区别化的修改。

        B、继承的初始化顺序
            1、初始化父类再初始化子类
            2、先初始化对象中的属性，再执行构造方法中的初始化。

            基于上面两点，我们就知道实例化一个子类，java程序执行的顺序是：
            父类对象属性初始化 ---> 父类对象构造方法 ---> 子类对象属性初始化 ---> 子类对象构造方法

        C、final关键字
            使用 “final” 关键字做标识有 “最终的” 含义

            1.final 修饰类，则该类 不允许继承。
            2.final 修饰方法，则该方法 不允许被（覆盖）重写。
            3.final 修饰属性，则该该类的该属性不会进行隐式的初始化，所以该final属性的初始化属性必须有值，
                或在构造方法中赋值（但只能选其一，必须选其一，因为没有默认值），且构造方法初始化之后就不能再修改了，只能复制一次。
            4.final 修饰变量，则改变量的值只能复制一次，在声明变量的时候才能赋值，既变为 常量。

        D、super 关键字
            在对象的内部使用，可以代表父类对象。
                1.访问父类的属性 super.age
                2.访问父类的方法 super.eat()

            super 的应用
                首先我们知道子类的构造过程当中必须调用父类的构造方法。其实这个过程已经隐式的使用了 super 关键字。
                这是因为如果子类的构造方法没有显示调用父类的构造方法，则系统会默认调用父类无参构造方法。
                如果自己用super关键字在子类里调用父类的构造方法，则必须在子类方法中的第一行。
                要注意的是：如果子类方法中既没有显示的调用父类的构造方法，而父类(前提是父类有有参的构造函数)没有无参的构造方法，则编译器出错。

    二、封装
        1、封装的概念
            封装是将代码及其处理的数据绑定到一起的一种编程机制，该机制保证了程序和数据都不受外界干扰且不被误用。封装的目的在于保护信息，
            使用它的主要优点如下：
                · 保护类中的信息，它可以可以阻止在外部定义的代码随意访问内部代码和数据。
                · 隐藏细节信息，一些不需要程序员修改和使用的信息，比如取款机中的键盘，用户只需要按那个键实现什么操作就可以，至于它的内部是如何运行的用户不需要知道。
                · 有助于建立各个系统之间的松耦合关系，提高系统的独立性。当一个系统的实现方式发生变化时，只保证它的接口不变，就不会影响其它系统的使用。例如 U 盘，
                    不管里面的存储方式怎么变，只要 U 盘上的 USB 接口不变，就不会影响用户的正常操作。
                · 提高软件的复用率，降低成本。每个系统都是一个相对独立的整体，可以在不同的环境中使用。例如一个 U 盘可以在不同的电脑上使用。
            Java语言基本封装单位是类。由于类的封装是复杂性，所以类的内部隐藏实现复杂性的机制。Java提供了私有和公有的访问模式，类的公有接口代表外部的用户知道或者可以
            知道的每件东西，私有的方法数据只能通过该类的成员代码来访问，这就可以保证不会发生不希望的事情。

        2、封装的优点
            在面向对象程序设计方法中，封装（英文：Encapsulation）是指一种将抽象性函数接口的实现细节部分包装、隐藏起来的方法。
            封装可以被认为是一种保护屏障，防止该类的代码和数据被外部的类定义的代码随机访问。
            要访问该的代码和数据，必须通过严格的接口控制。
            封装最主要的功能在于我们能修改自己实现的代码，而不用修改哪些调用我们代码的程序片段。
            适当的封装可以让程式码更容易维理解和维护，也加强了程式码的安全性。

            封装的优点：
                1.良好的封装能够减少耦合。
                2.类的内部结构可以自由修改。
                3.可以对成员变量更精准的控制。
                4.隐藏信息，实现细节。

            Java封装，说白了就是将一大坨公共通用的实现逻辑玩意，装到一个盒子里（class），出入口都在这个盒子上。你要用就将这个盒子拿来用，连接出入口，就能用了，
            不用就直接扔了，对你代码没有影响。

            对程序员来说使用封装的目的：
                1.偷懒，辛苦一次，后面都能少敲很多代码，增强了代码的复用性。
                2.简化代码，看起来更容易懂。
                3.隐藏核心实现逻辑代码，简化外部逻辑，并且不让其他人修改，jar都是这么干的。
                4.一对一，一个功能就只能为这个功能服务；避免头发绳子一块用，导致最后一团糟。

        3、封装的实现步骤
            需要注意：对封装的属性不一定要通过get/set方法，其它的方法也可以对封装的属性进行操作。当然最好使用get/set方法，比较标准。
            A、访问修饰符
                访问修饰符   本类  同包  子类  其它
                private       √
                默认          √     √
                protected     √     √    √
                public        √     √    √     √

            B、this关键字
                1.this关键字代表当前对象
                  this.属性 操作当前对象属性
                  this.方法 调用当前对象方法
                2.封装对象的属性时，经常会用到this关键字。
                3.当getter和setter函数参数和成员函数名重合的时候，可以使用this.****区别。

            C、Java 中的内部类
                内部类（Inner Class）就是定义在另外一个类里面的类。与之对应，包含内部类的类被称为外部类。
                那么问题来了：那为什么要将一个类定义到另一个类里面呢？清清爽爽的独立一个类多好啊！！
                答：内部类的主要作用如下：
                    1.内部类提供了更好的封装，可以把内部类隐藏到外部类之内，不允许同一个包中的其它类访问该类。
                    2.内部类的方法可以直接访问外部类的所有数据，包括私有的数据。
                    3.内部类所实现的功能使用外部类同样可以实现，只是有时使用内部类更方便。

                    内部类可以分为以下几种：
                    · 成员内部类
                    · 静态内部类
                    · 方法内部类
                    · 匿名内部类

    三、多态
        1、多态的概念
            面向对象的多态性，既 “一个接口，多个方法”。多态性表现为父类的属性和方法被子类继承后，可以具有不同的属性和表现方式。
            多态性允许一个接口被多个同类使用，弥补了单继承的不足。多态性可以用树形关系来表示。

        2、多态的好处
            可替换性（substitutability）。多态对已存在的代码具有可替换性。例如，多态对园Circle类工作，对其他任何圆形几何体，如圆环也同样工作。
            可扩充性（extensibility）。多态对代码具有可扩充性。增加新的子类不影响已存在类的多态性、继承性，以及其它特性的运行和操作。实际上新加子类更容易获得多态功能。
                例如，在实现圆锥、半圆锥以及半球体的多态基础上，很容易增添球体类的多态性。
            接口性（interface-ability）。多态是超类通过方法签名，向子类提供一个公共接口，由子类来完善或者覆盖它而实现。
            灵活性（flexibility）。它在应用中体现了灵活多样的操作，提高了使用效率。
            简化性（simplicity）。多态简化对应用软件的代码编写和修改过程，尤其在处理大量对象的运算和操作时，这个特点尤为突出和重要。

            子代父类实例化，然后就相当于一个父亲有很多个儿子，送快递给这个父亲的儿子送东西，他只需要送到父亲家就可以了，至于具体是那个儿子的，父亲还会分不清自己儿子么，
            所以你就不用操心了。

            使用多态是一种好习惯 多态方式声明是一种好习惯。当我们创建的类，使用时，只用到它的超类或接口定义的方法时，我们可以将其索引声明为他的超类或者接口类型。

            它的好处是，如果某天我们对这个接口方法的实现方式变了，对这个接口又有一个新的实现类，我们的程序也需要使用最新的实现方式，此时只要将对象实现修改一下，索引无需变化。
            比如 ： Map<String, String> map = new HashMap<String, String>();
            想换成 HashTable 实现，可以 Map<String, String> map = new HashTable<String, String>();

            比如写一个方法，参数要求传List类型，你就可以使用List list = new ArrayList()中的list传递，但是你写成ArrayList list = new ArrayList()是传递不进去的。
            尽管方法处理时都一样。另外方法还可以根据你传递的不同list（ArrayList或LinkList）进行不同的处理

        3、Java中的多态
            java 中的多态主要表现在两方面：
                A、引用多态
                    父类的引用可以指向本类的对象。
                    父类的引用可以指向子类的对象。

                    这里我们必须深刻理解多态的意义，才能更好记忆这种多态的特性。为什么子类的引用不能用来指向父类的对象呢？我在这通俗的给大家讲解下：
                    就以上面的例子来说，我们能说“狗是一种动物”，但是不能说“动物是一种狗”，狗和动物是父类和子类的继承关系，它们的从属是不能颠倒的。
                    当父类的引用指向子类的对象时，该对象将只是看成一种特殊的父类（里面有重写的方法和属性），反之，一个子类的引用来指向父类的对象是不可行的！！

                B、方法多态
                    根据上述创建的两个对象：本类对象和子类对象，同样都是父类的引用，当我们指向不同的对象时，他们调用的方法也是多态的
                    创建本类对象时，调用的方法是本类的方法。
                    创建子类对象时，调用的方法为子类重写的方法或者继承的方法；
                    使用多态的时候要注意：如果我们在子类中编写一个独有的方法（没有继承父类的方法），此时就不能通过父类引用创建的子类对象来调用改方法！！！
                    注意：继承是多态的基础

                C、引用类型转换
                    了解了多态的含义后，我们在日常使用多态的特性时经常需要进行引用的类型转换。
                    引用类型转换：
                    1.向上类型转换（隐式/自动类型转换），是小类型转换到大类型
                        就以上述的父类Anima和一个子类Dog类说明，当父类的引用可以指向子类的对象时，就是向上类型转换。
                        Dog dog = new Dog();
                        Animal animal = dog; //自动类型提升，向上类型转换

                    2.向下类型转换（强制类型转换），是大类型转换到小类型（有风险，可能出现数据溢出）。
                        将上述代码再加上一行，我们再次将父类转换成子类引用，那么会出现错误，编译器不允许我们这样做，虽然我们知道这个父类引用指向的就是子类对象，
                        但是编译器认为这种转换是存在风险的。
                        Dog dog = new Dog();
                        Animal animal = dog; //自动类型提升，向上类型转换
                        Dog dog2 = animal;
                        那么我们该怎么解决这个问题呢，我们可以在animal前加上（Dog）来强制类型转换。如:
                        Dog dog2 = (Dog)animal; //向下类型转换，强制类型转换。

                        其实就是上面所说的子类的引用指向父类的对象，而强制转换类型也不能转换！！
                        还有一种情况是父类的引用指向其它的子类对象，则不能通过强制转为该子类对象。如：

                        这是因为我们在编译的时候进行了强制类型转换，编译时的类型是我们强制转换的类型，所以编译器不会报错，而当我们运行的时候，
                        程序给animal开辟的是Dog类型的内存空间，这与Cat类型内存空间不匹配，所以无法正常转换。这两种情况出现的本质是一样的，
                        所以我们在使用强制类型转换的时候特别注意这两种错误，下面有个更安全的方式来实现向下类型转换。。。

                    3.instanceof 运算符，来解决引用对象的类型，避免类型转换的安全问题。
                        instanceof 是Java的一个二元操作符，和==，>，< 是同一类东东。由于它是有字母组成的，所以也是Java的保留关键字。
                        它的作用是测试它左边的对象是否是它右边类的实例，返回boolean类型的数据。
                        我们来使用instanceof运算符来规避上面的错误，代码修改为如下：
                        if(animal instanceof Cat){
                            Cat cat = (Cat)animal; //1.编译时，Cat类型 2.运行时，Dog类型
                        }

                        利用if语句和instanceof运算符来判断两个对象的类型是否一致。
                        补充说明： 在比较一个对象是否和另一个对象属于同一类实例的时候，我们通常可以采用instanceof和getClass两种方法通过两者是否相等来判断，
                        但是两者在判断上面是有差别的。instanceof进行类型检查规则是： 你属于该类吗？或者你属于该类的派生类吗？而通过getClass获得的类型信息
                        采用==来进行检查是否相等的操作是严格判断的，不会存在继承方面的考虑；

                            **总结**：在写程序的时候，如果要进行类型转换，我们最好使用instanceof运算符来判断它左边的对象是否是它右边类的实例，再进行强制转换。

                D、重写和重载
                    多态一般可以分两种，一种是重写override，一个是重载overload

                    重写是由于继承关系中的子类有一个和父类同名同参数的方法，会覆盖掉父类的方法。
                    重载是因为一个同名方法可以传入多个参数的组合。
                    注意，同名方法如果参数相同，既使返回值不同也是不能同时存在的编译出错。
                    从jvm实现的角度来看，重写又叫运行时多态，编译时看不出子类调用的哪个方法，但是运行时操作数栈会先根据子类的引用去子类的类信息中查找方法，
                    找不到的话再到父类的类信息中查找方法。
                    而重载则是编译时多态，因为编译期就可以确定传入的参数组合，决定调用的具体方法是哪一个了。

                    1.向上转型和向下转型
                        例如：Transformation.java

                    总结：向上转型和向下转型都是进行引用转型，是编译器进行的转型，根据引用类型来判断使用哪个方法。并且在传入方法时会自动进行转型（有需要的话）。
                        运行期将引用指向实例，如果是不安全的转型则会报错，若安全则继续执行方法。

                    2.编译期的静态分派
                        其实就是根据引用类型来调用对应方法.
                        例如：StaticDispatch.java

                    3.方法重载优先级匹配
                        例如：ReloadPriority.java











